import matplotlib.pyplot as plt
# Calculadora de sistema de ecuaciones lineales
# entrada.py
# Funciones para solicitar coeficientes de sistemas 2x2 y 3x3
def solicitar_coeficientes_2x2(return_ab: bool = False):

    print("Ingrese los coeficientes para el sistema 2x2:")
    a1 = float(input("a1 (coeficiente de x en la ecuación 1): "))
    b1 = float(input("b1 (coeficiente de y en la ecuación 1): "))
    c1 = float(input("c1 (término independiente ecuación 1): "))
    a2 = float(input("a2 (coeficiente de x en la ecuación 2): "))
    b2 = float(input("b2 (coeficiente de y en la ecuación 2): "))
    c2 = float(input("c2 (término independiente ecuación 2): "))
    if return_ab:
            A = [[a1, b1],
                [a2, b2]]
            b = [[c1],
                [c2]]
            return A, b

    M_aug = [[a1, b1, c1],
            [a2, b2, c2]]
    return M_aug
def solicitar_coeficientes_3x3(return_ab: bool = False):
    print("Ingrese los coeficientes para el sistema 3x3:")
    a1 = float(input("a1 (coeficiente de x en la ecuación 1): "))
    b1 = float(input("b1 (coeficiente de y en la ecuación 1): "))
    c1 = float(input("c1 (coeficiente de z en la ecuación 1): "))
    d1 = float(input("d1 (término independiente ecuación 1): "))
    a2 = float(input("a2 (coeficiente de x en la ecuación 2): "))
    b2 = float(input("b2 (coeficiente de y en la ecuación 2): "))
    c2 = float(input("c2 (coeficiente de z en la ecuación 2): "))
    d2 = float(input("d2 (término independiente ecuación 2): "))
    a3 = float(input("a3 (coeficiente de x en la ecuación 3): "))
    b3 = float(input("b3 (coeficiente de y en la ecuación 3): "))
    c3 = float(input("c3 (coeficiente de z en la ecuación 3): "))
    d3 = float(input("d3 (término independiente ecuación 3): "))

    if return_ab:
            A = [[a1, b1, c1],
                [a2, b2, c2],
                [a3, b3, c3]]
            b = [[d1],
                [d2],
                [d3]]
            return A, b

    M_aug = [[a1, b1, c1, d1],
            [a2, b2, c2, d2],
            [a3, b3, c3, d3]]
    return M_aug

# --- Utilidad opcional para imprimir bonito la matriz aumentada ---
def imprimir_matriz(M):
    # Calcula ancho por columna para alinear
    cols = len(M[0])
    widths = [max(len(str(M[i][j])) for i in range(len(M))) for j in range(cols)]
    for fila in M:
        cuerpo = "  ".join(str(x).rjust(widths[j]) for j, x in enumerate(fila[:-1]))
        print(f"[ {cuerpo} | {str(fila[-1]).rjust(widths[-1])} ]")

# --- Demo mínima (elimina este main si integras en tu programa) ---
# --- Función para mostrar la matriz gráficamente ---
def mostrar_matriz_grafica(M):
    fig, ax = plt.subplots(figsize=(6, 4))
    ax.axis(tight)
    ax.axis(off)
    table = ax.table(cellText=M, loc=center, cellLoc=center)
    table.auto_set_font_size(False)
    table.set_fontsize(12)
    table.scale(1.2, 1.2)
    plt.title("Matriz Aumentada")
    plt.show()if __name__ == "__main__":
    # Ejemplo rápido 2x2 con matriz aumentada:
    M2 = solicitar_coeficientes_2x2(return_ab=False)
    print("\nMatriz aumentada 2x2:")
    imprimir_matriz(M2)

    # Ejemplo rápido 3x3 devolviendo A y b por separado:
    A3, b3 = solicitar_coeficientes_3x3(return_ab=True)
    print("\nMatriz de coeficientes A (3x3):")
    for fila in A3: print(fila)
    print("Vector columna b (3x1):")
    for fila in b3: print(fila)